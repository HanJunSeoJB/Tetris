Index: tetris/src/kr/ac/jbnu/se/tetris/GameLogicManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kr.ac.jbnu.se.tetris;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Timer;\r\n\r\npublic class GameLogicManager {\r\n\r\n    //* 변수 초기화\r\n    private boolean isStarted = false;\r\n    private boolean isPaused = false;\r\n    private int numLinesRemoved = 0;\r\n    private int curX = 0;\r\n    private int curY = 0;\r\n\r\n    private int BoardWidth;\r\n    private int BoardHeight;\r\n    private Shape curPiece;\r\n    private boolean isFallingFinished = false;\r\n    //*\r\n\r\n    //* 객체 초기화\r\n    private final Board board;\r\n    private final TimerManager timerManager;\r\n    private final UIManager uiManager;\r\n    private final ShapeAndTetrominoesManager shapeAndTetrominoesManager;\r\n    //private final EventManager eventManager;\r\n    private final ConfigurationManager configurationManager;\r\n\r\n    //*\r\n\r\n    //* 게터&세터 메소드\r\n    public int getCurX() {\r\n        return curX;\r\n    }\r\n\r\n\r\n    public int getCurY() {\r\n        return curY;\r\n    }\r\n\r\n\r\n    public Shape getCurPiece() {\r\n        return curPiece;\r\n    }\r\n\r\n\r\n    public boolean isFallingFinished() {\r\n        return isFallingFinished;\r\n    }\r\n\r\n    public void setFallingFinished(boolean fallingFinished) {\r\n        isFallingFinished = fallingFinished;\r\n    }\r\n\r\n\r\n    public void setStarted(boolean started) {\r\n        isStarted = started;\r\n    }\r\n\r\n    public boolean isPaused() {\r\n        return isPaused;\r\n    }\r\n\r\n\r\n    public int getNumLinesRemoved() {\r\n        return numLinesRemoved;\r\n    }\r\n\r\n    public boolean isStarted() {\r\n        return isStarted;\r\n    }\r\n    //*\r\n\r\n    //* 클래스 초기화\r\n    public GameLogicManager(Board board) {\r\n        this.board = board;\r\n        this.curPiece = new Shape();\r\n        this.uiManager = board.getUIManager();\r\n        this.shapeAndTetrominoesManager = new ShapeAndTetrominoesManager();\r\n        this.timerManager = board.getTimerManager();\r\n        //this.eventManager = new EventManager(this);\r\n        this.configurationManager = new ConfigurationManager();\r\n        this.BoardWidth= configurationManager.getBoardWidth();\r\n        this.BoardHeight = configurationManager.getBoardHeight();\r\n\r\n    }\r\n    //*\r\n\r\n    //* 블럭이 떨어지게 하는 함수\r\n    public void dropDown() {\r\n        int newY = curY;\r\n        while (newY > 0) {\r\n            if (!tryMove(curPiece, curX, newY - 1))\r\n                break;\r\n            --newY;\r\n        }\r\n        pieceDropped();\r\n    }\r\n    //*\r\n\r\n    // 블럭이 바닥에 닿았나 확인하는 함수\r\n    public void pieceDropped() {\r\n        Tetrominoes[] boardArray = board.getBoardArray();\r\n        System.out.println(curPiece.getPieceShape());\r\n        for (int i = 0; i < 4; ++i) {\r\n            int x = curX + curPiece.x(i);\r\n            int y =curY - curPiece.y(i);\r\n            boardArray[(y * BoardWidth) + x] = curPiece.getShape();\r\n        }\r\n\r\n        removeFullLines();\r\n\r\n        if (!isFallingFinished) {\r\n            newPiece();\r\n        }\r\n    }\r\n    //*\r\n\r\n    //* 새 조각 생성 함수\r\n    public void newPiece() {\r\n\r\n        shapeAndTetrominoesManager.generateNewShape();\r\n        curPiece = shapeAndTetrominoesManager.getCurrentShape();\r\n        curX = BoardWidth / 2 + 1;\r\n        curY = BoardHeight - 1 + curPiece.minY();\r\n\r\n        if (!tryMove(curPiece, curX, curY)) {\r\n            curPiece.setShape(Tetrominoes.NoShape);\r\n            timerManager.stopTimer();\r\n            isStarted = false;\r\n           uiManager.updateStatusbar(\"game over\");\r\n        }\r\n    }\r\n    //*\r\n\r\n    //* 줄 제거 함수\r\n    public void removeFullLines() {\r\n        int numFullLines = 0;\r\n\r\n        Tetrominoes[] boardArray = board.getBoardArray();\r\n\r\n        for (int i = BoardHeight - 1; i >= 0; --i) {\r\n            boolean lineIsFull = true;\r\n\r\n            for (int j = 0; j < BoardWidth; ++j) {\r\n                if (shapeAt(j, i) == Tetrominoes.NoShape) {\r\n                    lineIsFull = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (lineIsFull) {\r\n                ++numFullLines;\r\n                for (int k = i; k < BoardHeight - 1; ++k) {\r\n                    for (int j = 0; j < BoardWidth; ++j) {\r\n                        boardArray[(k * BoardWidth) + j] = shapeAt(j, k + 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        if (numFullLines > 0) {\r\n            numLinesRemoved += numFullLines;\r\n            uiManager.updateScore(numLinesRemoved);\r\n            isFallingFinished = true;\r\n            curPiece.setShape(Tetrominoes.NoShape);\r\n            board.repaint();\r\n        }\r\n    }\r\n    //*\r\n\r\n\r\n    //* ?\r\n    public Tetrominoes shapeAt(int x, int y) {\r\n        Tetrominoes[] boardArray = board.getBoardArray();\r\n        return boardArray[(y * BoardWidth) + x];\r\n    }\r\n//*\r\n\r\n    //* 블럭 좌,우 이동 함수\r\n    public boolean tryMove(Shape newPiece, int newX, int newY) {\r\n\r\n        for (int i = 0; i < 4; ++i) {\r\n            int x = newX + newPiece.x(i);\r\n            int y = newY - newPiece.y(i);\r\n            if (x < 0 || x >= BoardWidth || y < 0 || y >= BoardHeight)\r\n                return false;\r\n            if (shapeAt(x, y) != Tetrominoes.NoShape)\r\n                return false;\r\n        }\r\n\r\n        curPiece = newPiece;\r\n        curX = newX;\r\n        curY = newY;\r\n        board.repaint();\r\n        return true;\r\n    }\r\n    //*\r\n\r\n    //* 블럭이 한 줄 떨어지게 하는 함수\r\n    public void oneLineDown() {\r\n        if (!tryMove(curPiece, curX, curY - 1))\r\n            pieceDropped();\r\n    }\r\n    //*\r\n\r\n    //* 오른쪽 회전 함수\r\n    public void rotateRight() {\r\n        tryMove(shapeAndTetrominoesManager.rotateRight(), curX, curY);\r\n    }\r\n\r\n    //* 왼쪽 회전 함수\r\n    public void rotateLeft() {\r\n        tryMove(shapeAndTetrominoesManager.rotateLeft(), curX, curY);\r\n    }\r\n    //*\r\n\r\n    //* 게임 정지 기능\r\n    public void pause() {\r\n        if (!isStarted)\r\n            return;\r\n\r\n        isPaused = !isPaused;\r\n        if (isPaused) {\r\n            timerManager.stopTimer();\r\n            uiManager.updateStatusbar(\"paused\");\r\n        } else {\r\n            timerManager.startTimer();\r\n            uiManager.updateStatusbar(String.valueOf(numLinesRemoved));\r\n        }\r\n        board.repaint();\r\n    }\r\n    //*\r\n\r\n    public void printBoard() {\r\n        Tetrominoes[] boardArray = board.getBoardArray();\r\n        for (int i = 0; i < BoardHeight; i++) {\r\n            for (int j = 0; j < BoardWidth; j++) {\r\n                // 인덱스 변환하여 2차원 형태로 출력\r\n                System.out.print(boardArray[i * BoardWidth + j] + \" \");\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tetris/src/kr/ac/jbnu/se/tetris/GameLogicManager.java b/tetris/src/kr/ac/jbnu/se/tetris/GameLogicManager.java
--- a/tetris/src/kr/ac/jbnu/se/tetris/GameLogicManager.java	
+++ b/tetris/src/kr/ac/jbnu/se/tetris/GameLogicManager.java	
@@ -101,11 +101,11 @@
     // 블럭이 바닥에 닿았나 확인하는 함수
     public void pieceDropped() {
         Tetrominoes[] boardArray = board.getBoardArray();
-        System.out.println(curPiece.getPieceShape());
         for (int i = 0; i < 4; ++i) {
             int x = curX + curPiece.x(i);
             int y =curY - curPiece.y(i);
             boardArray[(y * BoardWidth) + x] = curPiece.getShape();
+
         }
 
         removeFullLines();
